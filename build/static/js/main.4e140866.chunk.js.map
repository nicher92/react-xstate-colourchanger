{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","nomatch","giveInformation","information","names","days","times","grammar","person","day","time","yesOrNoGrammar","tru","fal","goBackGrammar","goback","sayInput","context","Input","dmMachine","init","CLICK","askUser","RECOGNISED","target","actions","assign","query","recResult","invoke","id","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intent","name","onError","console","log","middlestate","always","cond","todo","timer","appointment","who","one","two","listener","question","first","partDay","wholeDayFinal","partDayFinal","endstate","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.4e140866.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: say(prompt),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I cant find what you are looking for\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }})\n    }\n\n\nfunction giveInformation (information: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            initial: information,\n            states: {\n                names: {\n                    entry: say(\"These are the people available, Tommy, Marina, Saga and John\"),\n                },\n                \n                days: { \n                    entry: say(\"These are the days available, Friday, Thursday and Wednesday\"),\n                },\n                times: { \n                    entry: say(\"These are the times available, seven o clock, eight o clock, nine o clock and ten o clock\"),\n                },\n            }})\n    }\n \n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"Tommy\": { person: \"Tommy Hertzberg\" },\n    \"Marina\": { person: \"Marina Noren\" },\n    \"Saga\": { person: \"Saga Nilsson\" },\n    \"John\": { person: \"John Appleseed\" },\n    \"Jon\": { person: \"John Appleseed\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"at nine\": { time: \"9\" },\n    \"nine\": { time: \"9\" },\n    \"nine o clock\": { time: \"9\" },\n    \"seven\": { time: \"7\" },\n    \"seven o clock\": { time: \"7\" },\n    \"at eight\": { time: \"8\" },\n    \"eight\": { time: \"8\" },\n    \"eight o clock\": { time: \"8\" },\n    \"at ten\": { time: \"10\" },\n    \"tenn\": {time: \"10\" },\n    \"ten o clock\": { time: \"10\" },\n    \"ten\": {time: \"10\" },\n}\n\n\nconst yesOrNoGrammar: { [index: string]: { tru?: string, fal?: string } } = {\n    \"ya\": { tru: \"yes\" },\n    \"ja\": { tru: \"yes\" },\n    \"yes\": { tru: \"yes\" },\n    \"yeah\": { tru: \"yes\" },\n    \"ya\": { tru: \"yes\" },\n    \"ok\": { tru: \"yes\" },\n    \"okay\": { tru: \"yes\" },\n    \"sure\": { tru: \"yes\" },\n    \"no\": { fal: \"no\" },\n    \"nope\": { fal: \"no\" },\n    \"nah\": { fal: \"no\" },\n    \"no way\": { fal: \"no\" },\n    \"nej\": { fal: \"no\" },\n}\n\n\nconst goBackGrammar: { [index: string]: { goback?: string } } = {\n    \"Go back\": { goback: \"go back\" },\n    \"previous\": { goback: \"go back\" },\n    \"previous stage\": { goback: \"go back\" },\n    \"back\": { goback: \"go back\" },\n    \"back up\": { goback: \"go back\" },\n    \"return\": { goback: \"go back\" },\n    \n}\n\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://meeting-maker.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n        \n\nconst sayInput: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.Input}`\n}))\n\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: { \n                CLICK: \"askUser\" \n            },\n        },\n            \n            askUser: {\n                on: { \n                    RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { query: context.recResult } } ),\n                  }\n                },\n            ...promptAndAsk(\"what would you like to do?\")\n            },\n            \n            query: {\n                invoke: {\n                    id: \"NLU\",\n                    src: (context, event) => nluRequest(context.query),\n                    onDone: {\n                        target: \"middlestate\",\n                        actions: [assign((context, event) => { return {Input: event.data.intent.name }}),\n                                (context:SDSContext, event:any) => sayInput || {}],\n                    },\n                    onError: {\n                        target: \"init\",\n                        actions: (context, event) => console.log(event.data),\n                    }\n                  },\n                },\n        \n        \n        middlestate: {\n            always: [\n                { target: \"timer\", cond: (context, event) => context.Input === \"timer\" },\n                { target: \"appointment\", cond: (context, event) => context.Input === \"appointment\" },\n                { target:  \"todo\", cond: (context, event) => context.Input === \"to do\"},\n                { target: \"nomatch\" }]\n        },\n        \n        nomatch: {\n            on: { ENDSPEECH: \"askUser\" },\n            entry: say(\"sorry, that option is not available, please try again\")\n            },\n        \n        todo: {\n            on: { ENDSPEECH: \"init\" },\n            entry: say(\"welcome to the to do state\")\n        },\n        \n        timer: {\n            on: { ENDSPEECH: \"init\" },\n            entry: say(\"welcome to the timer state\")\n        },\n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        \n        \n        who: {\n            initial: \"one\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"},\n                    { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                    target:  \"askUser\" },\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                one: {\n                    ...giveInformation(\"names\"),\n                on: { ENDSPEECH: \"two\" }\n            },\n                two: { ...promptAndAsk(\"Who are you meeting with\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry, that person is not available\"),\n                    on: { ENDSPEECH: \"one\" }\n                },\n            }, \n        },\n        \n        day: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"listener\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, you want to meet ${context.person}`\n                        }))\n                        },\n                    },\n                }, \n                \n        listener: {\n                initial: \"one\",\n                on : { \n                    RECOGNISED: [{\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { day: grammar[context.recResult].day } }), \n                        target: \"question\" },\n                        { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                        actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                        target:  \"who\" },\n                        { target: \".nomatch\", }]\n                            }, \n                states: {\n                one: {\n                    ...giveInformation(\"days\"),\n                on: { ENDSPEECH: \"two\" }\n                    },\n                two: { ...promptAndAsk(\"On which day is your meeting\"),\n                        },\n                nomatch: {\n                    entry: say(\"Sorry, that day is not available\"),\n                    on: { ENDSPEECH: \"one\" }\n                },\n                    }, \n                },\n                        \n\n            \n        question: {\n            initial: \"first\", \n            on: { RECOGNISED: \n                            [{\n                            cond: (context) => \"tru\" in (yesOrNoGrammar[context.recResult] || {}),\n                            actions: assign((context) => { return { tru: yesOrNoGrammar[context.recResult].tru } }),\n                            target: \"wholeDayFinal\"\n                            },\n                            {\n                            cond: (context) => \"fal\" in (yesOrNoGrammar[context.recResult] || {}),\n                            actions: assign((context) => { return { fal: yesOrNoGrammar[context.recResult].fal } }),\n                            target:  \"partDay\" \n                            },\n                            { target: \".nomatch\", }],\n                        },\n            states: {\n                        first: {\n                            entry: say(\"will the appointment take the entire day\"),\n                        on: {ENDSPEECH: \"ask\" },\n                        },\n                        \n                        ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Please repeat yourself\"),\n                    on: { ENDSPEECH: \"first\" }\n                },\n                }, \n            },\n    \n    \n    \n                \n          partDay: {\n                initial: \"one\", \n                on : { \n                    RECOGNISED: [{\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: assign((context) => { return { time: grammar[context.recResult].time } }), \n                        target: \"partDayFinal\" },\n                        { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                        actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                        target:  \"question\" },\n                        { target: \".nomatch\", }]\n                        \n                            },\n                states: {\n                        one: {\n                            ...giveInformation(\"times\"),\n                            on: { ENDSPEECH: \"two\" }\n                        },\n                        two: { ...promptAndAsk(\"At what time is your meeting?\"),\n                            },\n                nomatch: {\n                    entry: say(\"Please repeat yourself\"),\n                    on: { ENDSPEECH: \"one\" }\n                    },\n                }, \n            },\n\n                \n        wholeDayFinal: {\n                initial: \"first\", \n                    on: { \n                        RECOGNISED: \n                                [{\n                                cond: (context) => \"tru\" in (yesOrNoGrammar[context.recResult] || {}),\n                                actions: assign((context) => { return { tru: yesOrNoGrammar[context.recResult].tru } }),\n                                target: \"#root.dm.endstate\"\n                                },\n                                \n                                { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                                  actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                                  target:  \"question\" },\n                        \n                                {\n                                cond: (context) => \"fal\" in (yesOrNoGrammar[context.recResult] || {}),\n                                actions: assign((context) => { return { fal: yesOrNoGrammar[context.recResult].fal } }),\n                                target:  \"#root.dm.init\"  \n                                },\n                       { target: \".nomatch\", }],\n                        },\n                    \n                    states: {\n                        first: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK, you want to meet ${context.person} on ${context.day} the entire day`\n                        })),\n                        on: {ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Please repeat yourself\"),\n                    on: { ENDSPEECH: \"first\" }\n                },\n                    }, \n                },\n\n        partDayFinal:  {\n                initial: \"first\", \n                    on: { \n                        RECOGNISED: \n                                [{\n                                cond: (context) => \"tru\" in (yesOrNoGrammar[context.recResult] || {}),\n                                actions: assign((context) => { return { tru: yesOrNoGrammar[context.recResult].tru } }),\n                                target: \"#root.dm.endstate\"\n                                },\n                                \n                                { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                                  actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                                  target:  \"question\" },\n                        \n                                {\n                                cond: (context) => \"fal\" in (yesOrNoGrammar[context.recResult] || {}),\n                                actions: assign((context) => { return { fal: yesOrNoGrammar[context.recResult].fal } }),\n                                target:  \"#root.dm.init\"  \n                                },]\n                        \n                        },\n                    \n                    states: {\n                        first: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK, you want to meet ${context.person} on ${context.day} at ${context.time}`\n                        })),\n                        on: {ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Please repeat yourself\"),\n                    on: { ENDSPEECH: \"first\" }\n                },\n                    }, \n                },\n\n        endstate: { \n            entry: say(\"your appointment has been created\"),\n            type: \"final\"\n            },\n        }, //end of all states\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n                \n            );\n    }\n}\n\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'http://meeting-maker.herokuapp.com/'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}