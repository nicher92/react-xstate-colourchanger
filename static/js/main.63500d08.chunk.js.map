{"version":3,"sources":["finalassignment.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","yesOrNoGrammar","tru","fal","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","player3questions","country","question1","question2","question3","RECOGNISED","target","cond","context","recResult","player1","player2","player3","Qnumber","entrystate","always","firstQ","assign","secondQ","thirdQ","zeropoints","onepoint","twopoints","threepoints","player2questions","Input","player1questions","itworks","transitionstate","wronganswer","NLUstate","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","sayScoreThreePlayers","firstname","secondname","thirdname","sayScoreTwoPlayers","sayScoreOnePlayer","order12","order21","order213","order123","order321","order312","order132","order231","countries","randomCountries","a","i","length","random","splice","Math","floor","push","textclean","toLowerCase","replace","trimStart","split","player1turn","player2turn","player3turn","fetch","Request","proxyurl","method","headers","body","then","json","dmMachine","playerTurn","questionCounter","init","CLICK","topstate","hist","history","getName","query","undefined","onePlayerGreeting","twoPlayerGreeting","threePlayerGreeting","rightName","choosePlayer","playernamesaid","firstplayerQ","first","greeting","transmissionstate","FinlandQ","SwedenQ","DenmarkQ","LithuaniaQ","GermanyQ","RussiaQ","EstoniaQ","PolandQ","LatviaQ","secondplayerQ","thirdplayerQ","help","score1player","score2player","score3player","winner","firststate","oneplayer","twoplayers","onetwo","twoone","threeplayers","threeTwoOne","threeOneTwo","oneThreeTwo","twoThreeOne","twoOneThree","oneTwoThree","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","MAXSPEECH","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.63500d08.chunk.js","sourcesContent":["import { MachineConfig, Action, actions, assign } from \"xstate\";\nimport { pure } from 'xstate/lib/actions';\n\nconst {send, cancel} = actions;\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nconst yesOrNoGrammar: { [index: string]: { tru?: string, fal?: string } } = {\n    \"ya\": { tru: \"yes\" },\n    \"ja\": { tru: \"yes\" },\n    \"yes\": { tru: \"yes\" },\n    \"yeah\": { tru: \"yes\" },\n    \"ok\": { tru: \"yes\" },\n    \"okay\": { tru: \"yes\" },\n    \"sure\": { tru: \"yes\" },\n    \"no\": { fal: \"no\" },\n    \"nope\": { fal: \"no\" },\n    \"nah\": { fal: \"no\" },\n    \"no way\": { fal: \"no\" },\n    \"nej\": { fal: \"no\" },\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\nfunction player3questions(country: string, question1: string, question2: string, question3: string): MachineConfig<SDSContext, any, SDSEvent> {\n    \n    return ({\n    initial: \"entrystate\",\n    on: { RECOGNISED: \n        [ \n            {target: '#root.dm.help', cond: (context) => context.recResult === 'help'},\n            {target: \"#root.dm.score1player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 === -1  && context.player3 === -1},\n            {target: \"#root.dm.score2player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 === -1},\n            {target: \"#root.dm.score3player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 > -1},\n        { target: \".threepoints\", cond: (context) => ((context.Qnumber) === 2 && (context.recResult === country)) && (context.recResult) !== (\"score\" || \"Score\")},\n        { target: \".twopoints\", cond: (context) => (context.Qnumber) === 1 && (context.recResult === country) && (context.recResult) !== (\"score\" || \"Score\")},\n        { target: \".onepoint\", cond: (context) => (context.Qnumber) === 0 && (context.recResult === country) && (context.recResult) !== (\"score\" || \"Score\")},\n        { target: \".secondQ\", cond: (context) => (context.Qnumber) === 2 },\n        { target: \".thirdQ\", cond: (context) => (context.Qnumber) === 1 },\n        { target: \".zeropoints\", cond: (context) => (context.Qnumber) === 0},\n        ],\n    },\n    states: {\n        entrystate: {\n            always: [\n                { target: \"firstQ\", cond: (context) => (context.Qnumber) === 3 },\n                { target: \"secondQ\", cond: (context) => (context.Qnumber) === 2 },\n                { target: \"thirdQ\", cond: (context) => (context.Qnumber) === 1 },\n            ]\n\n        },\n        firstQ: {\n            entry: say(\"For three points,\" + question1), \n            on: { \n                ENDSPEECH:  { \n                    actions: [assign({Qnumber: (context) => context.Qnumber = 2})], \n                    target: \"ask\" }\n        }\n    },\n        ask: {\n            entry: send(\"LISTEN\")\n    },\n\n        secondQ: {\n            entry: say(\"wrong answer, for two points,\" + question2),\n            on: { \n                ENDSPEECH:  { \n                    actions: [assign({Qnumber: (context) => context.Qnumber = 1})], \n                    target: \"ask\" }\n        }\n    },\n    thirdQ: {\n        entry: say(\"wrong answer, for one point,\" + question3),\n        on: { \n            ENDSPEECH:  { \n                actions: [assign({Qnumber: (context) => context.Qnumber = 0})], \n                target: \"ask\" }\n    }\n\n    },\n    zeropoints: {\n        entry: say(\"you got zero points!, the correct answer was,\" + country + \",we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: { \n            actions: [assign({Qnumber: (context) => context.Qnumber = 3})], \n            target: \"#root.dm.topstate.choosePlayer\" }\n        }       \n    },\n\n    onepoint: {\n        entry: say(\"you only got one point!, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n            { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player3: (context) => context.player3 + 1})],\n            target: \"#root.dm.topstate.choosePlayer\" }\n            ],\n        }         \n    },\n    twopoints: {\n        entry: say(\"you got two points! thats pretty good, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n                { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player3: (context) => context.player3 + 2})],\n                target: \"#root.dm.topstate.choosePlayer\" }\n                ],\n        }       \n    },\n    threepoints: {\n        entry: say(\"you got three points!, very well done, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n            { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player3: (context) => context.player3 + 3})],\n            target: \"#root.dm.topstate.choosePlayer\" //\"#root.dm.topstate.\" + targeted \n            },],\n        }         \n    }\n},\n})\n}\n\nfunction player2questions(country: string, question1: string, question2: string, question3: string): MachineConfig<SDSContext, any, SDSEvent> {\n    \n    \n    return ({\n    initial: \"entrystate\",\n    on: { RECOGNISED: \n        [ \n            {target: '#root.dm.help', cond: (context) => context.recResult === 'help'},\n            {target: \"#root.dm.score1player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 === -1  && context.player3 === -1},\n            {target: \"#root.dm.score2player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 === -1},\n            {target: \"#root.dm.score3player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 > -1},\n        { target: \".threepoints\", cond: (context) => ((context.Qnumber) === 2 && (context.recResult === country)) && (context.recResult) !== (\"score\" || \"Score\")},\n        { target: \".twopoints\", cond: (context) => (context.Qnumber) === 1 && (context.recResult === country) && (context.recResult) !== (\"score\" || \"Score\")},\n        { target: \".onepoint\", cond: (context) => (context.Qnumber) === 0 && (context.recResult === country) && (context.recResult) !== (\"score\" || \"Score\")},\n        { target: \".secondQ\", cond: (context) => (context.Qnumber) === 2 },\n        { target: \".thirdQ\", cond: (context) => (context.Qnumber) === 1 },\n        { target: \".zeropoints\", cond: (context) => (context.Qnumber) === 0 },\n        ],\n    },\n    states: {\n        entrystate: {\n            always: [\n                { target: \"firstQ\", cond: (context) => (context.Qnumber) === 3 },\n                { target: \"secondQ\", cond: (context) => (context.Qnumber) === 2 },\n                { target: \"thirdQ\", cond: (context) => (context.Qnumber) === 1 },\n            ]\n\n        },\n        firstQ: {\n            entry: say(\"For three points,\" + question1), \n            on: { \n                ENDSPEECH:  { \n                    actions: [assign({Qnumber: (context) => context.Qnumber = 2})], \n                    target: \"ask\" }\n        }\n    },\n        ask: {\n            entry: send(\"LISTEN\")\n    },\n\n        secondQ: {\n            entry: say(\"wrong answer, for two points,\" + question2),\n            on: { \n                ENDSPEECH:  { \n                    actions: [assign({Qnumber: (context) => context.Qnumber = 1})], \n                    target: \"ask\" }\n        }\n    },\n    thirdQ: {\n        entry: say(\"wrong answer, for one point,\" + question3),\n        on: { \n            ENDSPEECH:  { \n                actions: [assign({Qnumber: (context) => context.Qnumber = 0})], \n                target: \"ask\" }\n    }\n\n    },\n    zeropoints: {\n        entry: say(\"you got zero points!, the correct answer was,\" + country + \",we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: { \n            actions: [assign({Qnumber: (context) => context.Qnumber = 3})], \n            target: \"#root.dm.topstate.choosePlayer\" }\n        }       \n    },\n\n    onepoint: {\n        entry: say(\"you only got one point!, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n            { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player2: (context) => context.player1 + 1})],\n            target: \"#root.dm.topstate.choosePlayer\" }\n            ],\n        }         \n    },\n    twopoints: {\n        entry: say(\"you got two points! thats pretty good, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n                { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player2: (context) => context.player1 + 2})],\n                target: \"#root.dm.topstate.choosePlayer\" }\n                ],\n        }       \n    },\n    threepoints: {\n        entry: say(\"you got three points!, very well done, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n            { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player2: (context) => context.player2 + 3})],\n            target: \"#root.dm.topstate.choosePlayer\" //\"#root.dm.topstate.\" + targeted \n            },],\n        }         \n    }\n},\n})\n}\n\n\n\n//country grammar to deal with most common mispronounciations\nconst countryGrammar: { [index: string]: { lithuania?: string, denmark?: string, poland?: string} } = {\n    \"lituania\": {lithuania: \"lithuania\"}\n}\n\nconst sayInput: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.Input}`\n}))\n\n\n\n\n//this function takes as input a state to go to, name of country, and three questions, it then calculates points received depending on what question was answered\nfunction player1questions(country: string, question1: string, question2: string, question3: string): MachineConfig<SDSContext, any, SDSEvent> {\n    \n\n\n\n    ///add things nlu for \"help\", \"score\" and \"repeat question\"\n    //nlu help: \"help\", \"i dont understand\", \"im not sure what to do\"\n    //nlu score: who is winning?, what is the score?, score, what are my points?, how many points do i have?\n    //nlu repeat question: \"could you repeat the question\", \"i didnt hear\", \"say again\", \n    //try adding the action of going reducing the question counter by 1 whenever leaving this function, maybe also the player turn\n    //add some type of affirming the answer maybe? but that might be too annoying\n\n    //maybe add nlu and ask depending on if its not sure enough\n    \n    return ({\n        \n    initial: \"entrystate\",\n    on: { RECOGNISED: \n        { target: \".NLUstate\" },\n    },\n    \n    states: {\n        itworks: {\n            entry: say(\"it works!\")\n        },\n        transitionstate: {\n\n            //change if context.recResult === country and change it to if Input === country\n            //right now it transitions based on context.recresult\n            always: [\n            { target: 'itworks', cond: (context) => context.Input === 'appointment'}, //this works but nlu has not been updated for some reason\n            { target: \"wronganswer\", cond: (context) => context.wronganswer === 0 && context.recResult !== country && context.recResult !== (\"score\" || \"Score\")},   ///\n            { target: '#root.dm.help', cond: (context) => context.recResult === 'help'},\n            { target: \"#root.dm.score1player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 === -1  && context.player3 === -1},\n            { target: \"#root.dm.score2player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 === -1},\n            { target: \"#root.dm.score3player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 > -1},\n            { target: \"threepoints\", cond: (context) => ((context.Qnumber) === 2 && (context.recResult === country)) && (context.recResult) !== (\"score\" || \"Score\")},\n            { target: \"twopoints\", cond: (context) => (context.Qnumber) === 1 && (context.recResult === country) && (context.recResult) !== (\"score\" || \"Score\") },\n            { target: \"onepoint\", cond: (context) => (context.Qnumber) === 0 && (context.recResult === country) && (context.recResult) !== (\"score\" || \"Score\") },\n            { target: \"secondQ\", cond: (context) => (context.Qnumber) === 2 && (context.recResult) !== (\"score\" || \"Score\")},\n            { target: \"thirdQ\", cond: (context) => (context.Qnumber) === 1 && (context.recResult) !== (\"score\" || \"Score\")},\n            { target: \"zeropoints\", cond: (context) => (context.Qnumber) === 0 && (context.recResult) !== (\"score\" || \"Score\")},\n            ],\n\n        },\n        //this works, make the transition work\n        NLUstate: {\n            invoke: {\n                id: \"NLU\",\n                src: (context, event) => nluRequest(context.recResult),\n                onDone: {\n                    target: \"transitionstate\",\n                    actions: [assign((context, event) => { return {Input: event.data.intent.name }}),\n                            (context:SDSContext, event:any) => console.log(event.data) ],\n                         \n                },\n                onError: {\n                    target: \"wronganswer\",\n                    actions: (context, event) => console.log(event.data),\n                }\n              },\n            },\n\n        entrystate: {\n            always: [\n                { target: \"firstQ\", cond: (context) => (context.Qnumber) === 3 },\n                { target: \"secondQ\", cond: (context) => (context.Qnumber) === 2 },\n                { target: \"thirdQ\", cond: (context) => (context.Qnumber) === 1 },\n                { target: \"zeropoints\", cond: (context) => (context.Qnumber) === 0 }\n            ]\n\n        },\n        firstQ: {\n            entry: say(\"For three points,\" + question1), \n            on: { \n                ENDSPEECH:  { \n                    actions: [assign({Qnumber: (context) => context.Qnumber = 2}), assign({wronganswer: (context) => context.wronganswer = 0})], \n                    target: \"ask\" }\n        }\n    },\n        ask: {\n            entry: send(\"LISTEN\")\n    },\n\n        secondQ: {\n            entry: say(\"for two points,\" + question2),\n            on: { \n                ENDSPEECH:  { \n                    actions: [assign({Qnumber: (context) => context.Qnumber = 1}), assign({wronganswer: (context) => context.wronganswer = 0})], \n                    target: \"ask\" }\n        }\n    },\n    thirdQ: {\n        entry: say(\"for one point,\" + question3),\n        on: { \n            ENDSPEECH:  { \n                actions: [assign({Qnumber: (context) => context.Qnumber = 0}), assign({wronganswer: (context) => context.wronganswer = 0})], \n                target: \"ask\" }\n    }\n\n    }, \n\n    wronganswer: {\n        entry: say(\"wrong answer,\"),\n        on: { \n            ENDSPEECH: [\n            {\n            actions: [assign({wronganswer: (context) => context.wronganswer = 1})],\n            target: \"entrystate\"\n            },\n        ]\n    },\n},\n\n    zeropoints: {\n        entry: say(\"you got zero points!, the correct answer was,\" + country + \",we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: { \n            actions: [assign({Qnumber: (context) => context.Qnumber = 3})], \n            target: \"#root.dm.topstate.choosePlayer\" }\n        }       \n    },\n\n    onepoint: {\n        entry: say(\"you only got one point!, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n            { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player1: (context) => context.player1 + 1})],\n            target: \"#root.dm.topstate.choosePlayer\"},\n            ],\n        }         \n    },\n    twopoints: {\n        entry: say(\"you got two points! thats pretty good, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n                { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player1: (context) => context.player1 + 2})],\n                target: \"#root.dm.topstate.choosePlayer\"},\n                ],\n        }       \n    },\n    threepoints: {\n        entry: say(\"you got three points!, very well done, we will proceed to the next country\"),\n        on: { \n            ENDSPEECH: [\n            { actions: [assign({Qnumber: (context) => context.Qnumber = 3}), assign({player1: (context) => context.player1 + 3})],\n            target: \"#root.dm.topstate.choosePlayer\" \n            },],\n        }         \n    }\n},\n})\n}\n\n\n\n//maybe turn all of these into a function if possible?\nconst sayScoreThreePlayers: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.firstname} has score ${context.player1}, ${context.secondname} has score ${context.player2} and ${context.thirdname} has score ${context.player3}`\n    }))\n\nconst sayScoreTwoPlayers: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.firstname} has score ${context.player1}, ${context.secondname} has score ${context.player2}`\n}))\n\nconst sayScoreOnePlayer: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.firstname} has score ${context.player1}`\n}))\n\n\nconst order12: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.firstname} is the winner with a score of ${context.player1} over ${context.secondname} with a score of ${context.player2}`\n}))\n\nconst order21: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.secondname} is the winner with a score of ${context.player2} over ${context.firstname} with a score of ${context.player1}`\n}))\n\nconst order213: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.secondname} is the winner with a score of ${context.player2}, on second place is ${context.firstname} with a score of ${context.player1} and last ${context.thirdname} with a score of ${context.player3}` \n}))\n\nconst order123: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value:  `${context.firstname} is the winner with a score of ${context.player1}, on second place is ${context.secondname} with a score of ${context.player2} and last ${context.thirdname} won with a score of ${context.player3}`\n}))\n\nconst order321: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.thirdname} won with a score of ${context.player3}, on second place is ${context.secondname} with a score of ${context.player2} and last ${context.firstname} won with a score of ${context.player1}`\n}))\n\nconst order312: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.thirdname} won with a score of ${context.player3}, on second place is ${context.firstname} with a score of ${context.player1} and last ${context.secondname} won with a score of ${context.player2}`\n}))\n\n\nconst order132: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.firstname} won with a score of ${context.player1}, on second place is ${context.thirdname} with a score of ${context.player3} and last ${context.secondname} won with a score of ${context.player2}`\n}))\n\nconst order231: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.secondname} won with a score of ${context.player2}, on second place is ${context.thirdname} with a score of ${context.player3} and last ${context.firstname} won with a score of ${context.player1}`\n}))\n\n\n\n\n\n\n//maybe generate a bunch of random numbers in an array, if one player, take the next number\n//first starts with array[0], second with array[1], thid with array[2], take different steps depending on number of players\n// so target: array[0] + n?\n\n\n//stolen from stackoverflow with some modification\nconst countries = [\"FinlandQ\", \"SwedenQ\", \"DenmarkQ\", \"LithuaniaQ\", \"GermanyQ\", \"RussiaQ\", \"LatviaQ\", \"EstoniaQ\", \"PolandQ\"]\nconst randomCountries = []\nfor (var a = [0, 1, 2, 3, 4, 5, 6, 7, 8], i = a.length; i--; ) {\n    var random = a.splice(Math.floor(Math.random() * (i + 1)), 1)[0];\n    randomCountries.push(countries[random])\n}\n\nconsole.log(randomCountries)\n\n\n\n\n\n//create function that splits the utterance\n\n\n\n//im doing this because I want to be able to input whatever name i want, not just go by a grammar\n//i would rather have the input limited by a certain format than have a grammar or have a bunch of questions\n\n\n\n\n\n\n\nfunction textclean(text: string) {\n    text = text.toLowerCase()                \n    text = text.replace(\"it\",'')\n    text = text.replace(\"we\",'')\n    text = text.replace(\"are\",'')\n    text = text.replace(\"three\",'')\n    text = text.replace(\"two\",'')\n    text = text.replace(\"It\",'')\n    text = text.replace(\"people\",'')\n    text = text.replace(\"person\",'')\n    text = text.replace(\",\",'')\n    text = text.replace(\"our\",'')\n    text = text.replace(\"names\",'')\n    text = text.replace(\"are\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"is\",'')\n    text = text.replace(\"en\",'')\n    text = text.replace(\"me\",'')\n    text = text.replace(\"just\",'')\n    text = text.replace(\"My\",'')\n    text = text.replace(\"my\",'')\n    text = text.replace(\"name\",'')\n    text = text.replace(\"na\",'')\n    text = text.replace(\"and\",'')\n    text = text.replace(\"and\",'')\n    text = text.trimStart()\n    text = text.replace(/\\s\\s+/g, ' ')\n    var splitted = text.split(\" \");\n    return splitted\n}\n\n\n//it should also deal with no input at all\nfunction firstName(text: any): Action<SDSContext, SDSEvent> {\n    const name = textclean(text)[0]\n    return name\n    }\n\nfunction secondName(text: any): Action<SDSContext, SDSEvent> {\n    const name = textclean(text)[1]\n    return name\n    }\n\nfunction thirdName(text: any): Action<SDSContext, SDSEvent> {\n    const name = textclean(text)[2]\n    return name\n    }\n\n\n\n\nconst player1turn: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.firstname} it is your turn`\n}))\n\nconst player2turn: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.secondname} it is your turn`\n}))\n\nconst player3turn: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.thirdname} it is your turn`\n}))\n\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://meeting-maker.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n       \n\n\n        \n//TURN THIS FUNCTION INTO COUNTRY RECOGNIZING, SCORE, HELP AND REPEAT QUESTION\n//changed both targets to root.dm.init for testing\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    entry: [assign({player1: (context) => context.player1 = -1}), \n            assign({Qnumber: (context) => context.Qnumber = 3}),\n            assign({player2: (context) => context.player2 = -1}), \n            assign({player3: (context) => context.player3 = -1}), \n            assign({playerTurn: (context) => context.playerTurn = 1}),\n            assign({questionCounter: (context) => context.questionCounter = 0})],\n    states: {\n        init: {\n            on: {\n                CLICK: \"topstate\"\n            }\n        },\n        topstate: {\n\n            //add something like NLU for \"this game is too long\", \"when will it end\", \"is it finished soon\",\n            //help goes to getname while score goes to score?\n            initial: \"getName\",\n            on: {\n                RECOGNISED:\n                [\n                {target: '#root.dm.help', cond: (context) => context.recResult === 'help'},\n                {target: \"#root.dm.score1player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 === -1  && context.player3 === -1},\n                {target: \"#root.dm.score2player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 === -1},\n                {target: \"#root.dm.score3player\", cond: (context) => context.recResult === (\"score\" || \"Score\") && context.player1 > -1  && context.player2 > -1  && context.player3 > -1}\n                ],\n            },\n        states: {\n            hist: { type: 'history', history: 'shallow' },\n        getName: {\n            on: {\n            RECOGNISED: [\n                {\n                target: 'transitionstate',  cond: (context) => !(context.recResult === \"help\") && !(context.recResult === \"score\"),  // && context.firstname !== {} && context.secondname === {} && context.thirdname === {},\n                actions: [\n                    assign((context) => { return { query: context.recResult } || {} }), \n                    assign((context) => { return { firstname: firstName(context.query)  }}),\n                    assign((context) => { return { secondname: secondName(context.query)  }}),\n                    assign((context) => { return { thirdname: thirdName(context.query)  }}),\n                    (context:SDSContext, event:any) => console.log(\"firstname\", context.firstname),\n                    (context:SDSContext, event:any) => console.log(\"secondname\", context.secondname),\n                    (context:SDSContext, event:any) => console.log(\"thirdname\", context.thirdname),\n                    assign({player1: (context) => context.player1 = -1}),\n                    assign({player2: (context) => context.player2 = -1}), \n                    assign({player3: (context) => context.player3 = -1}), \n                    ],\n                },\n                ]\n                },\n            //getNLU(\"what would you like to do?\")\n            ...promptAndAsk(\"Please say the players names\")\n        },\n\n        transitionstate: {\n            always: [ \n            { target: 'onePlayerGreeting',  cond: (context) => !(context.recResult === \"help\") && !(context.recResult === \"score\") && (context.firstname) && (context.secondname) === undefined && (context.thirdname) === undefined},\n            { target: 'twoPlayerGreeting',  cond: (context) => !(context.recResult === \"help\") && !(context.recResult === \"score\") && (context.firstname) && (context.secondname)  && (context.thirdname === undefined )},\n            { target: 'threePlayerGreeting',  cond: (context) => !(context.recResult === \"help\") && !(context.recResult === \"score\") && ((context.firstname.length) > 0 && (context.secondname.length) > 0 && (context.thirdname.length) > 0 )},\n        ]\n        },\n\n        \n\n        //players start off with -1, they get activated as 0, when comparing in the end, only compare \"active\" players\n        //this needs improvement, if a player gets activated but it is wrong, it should be deactivated\n\n        onePlayerGreeting: {\n            on: { \n            ENDSPEECH: {\n                target: \"ask\",\n                actions: assign({player1: (context) => context.player1 = 0})\n            }, \n        },\n            entry: send((context) => ({\n                type: \"SPEAK\",\n                value: `Welcome  ${context.firstname}`\n                })),\n    },\n\n        twoPlayerGreeting: {\n            on: { \n                ENDSPEECH: {\n                    target: \"ask\",\n                    actions: [assign({player1: (context) => context.player1 = 0}), assign({player2: (context) => context.player2 = 0})]\n                }, \n            },\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Welcome ${context.firstname}, and welcome  ${context.secondname}`\n                    })),\n        },\n\n        threePlayerGreeting: {\n            on: { \n                ENDSPEECH: {\n                    target: \"ask\",\n                    actions: [assign({player1: (context) => context.player1 = 0}), assign({player2: (context) => context.player2 = 0}), assign({player3: (context) => context.player3 = 0})]\n                }, \n            },\n            entry: send((context) => ({\n                type: \"SPEAK\",\n                value: `Welcome  ${context.firstname},  ${context.secondname}  and ${context.thirdname}`\n                })),\n    },\n\n\n\n        //although a bit annoying to be asked a question, since i could not use NLU or grammars since i wanted the input to be whatever the players name are\n        //i have to have this question here, otherwise it might get the number of players wrong as well\n\n        ask: {\n           on: { RECOGNISED: \n            [\n            { cond: (context) => \"tru\" in (yesOrNoGrammar[context.recResult] || {}),\n            actions: [assign((context) => { return { tru: yesOrNoGrammar[context.recResult].tru } })],\n            target: \"rightName\" },\n            { cond: (context) => \"fal\" in (yesOrNoGrammar[context.recResult] || {}),\n            actions: [assign((context) => { return { fal: yesOrNoGrammar[context.recResult].fal } })],\n            target: \"getName\" },\n            ]\n        },\n        ...promptAndAsk(\"Did i get your names right?\")\n    },\n\n        rightName: {\n            entry: say(`lets proceed to the first country`),\n            on: {ENDSPEECH: \"choosePlayer\" }\n        },\n\n\n    //it was tricky to implement the context as a variable to the function, so I just designated some countries to some player values\n    //the upside of this is that players will not get the same questions, on the other hand i have the random variable...\n\n    \n    //possible solution, take all countries and questions in a dm machine\n    //create three states for player1, player2, player3, \n    //take randomint within each state for each player, then go to next player state etc\n    \n    choosePlayer: {\n        always: [ \n            { target: \"#root.dm.winner\", cond: (context) => context.questionCounter === 7 },    //put 2 for trial                     ///fix this one, sometimes 8th question happens\n            { target: \"firstplayerQ\", cond: (context) => context.playerTurn === 1, actions: assign({playernamesaid: (context) => context.playernamesaid = 0 })}, \n            { target: \"secondplayerQ\", cond: (context) => context.playerTurn === 2 && context.player2 > -1, actions: assign({playernamesaid: (context) => context.playernamesaid = 0 })},\n            { target: \"thirdplayerQ\", cond: (context) => context.playerTurn === 3 && context.player3 > -1, actions: assign({playernamesaid: (context) => context.playernamesaid = 0 })},\n            \n               ]\n    },\n\n\n\n\n    //it enters here, says it is player ones turn, then picks a random question that will increase player 1s points\n    //in each question, make sure the transition to the nexts players turn is correct depending on who is active\n    \n            //add a counter so that it does not say anything if it already said \"okay its your turn\"\n\n            //if it is only one player, there is no need to say \"okay it is your turn\"\n            //if it already is that players turn, there is no need to repeat it because you asked for the score\n    firstplayerQ: {\n        initial: \"first\",\n        states: {\n        first: {\n            always: \n            [\n                { \n                    //go to greeting only if player 2 is active, if there is only one player there is no need to say anything about turn\n                target: \"greeting\", cond: (context) => context.playernamesaid === 0 && context.player2 > -1,\n                actions: assign({playernamesaid: (context) => context.playernamesaid = 1})\n                }, \n                { \n                    target: \"transmissionstate\", cond: (context) => context.player2 === -1 || context.playernamesaid === 1,\n                },     \n            ],\n        },\n\n        greeting: {\n            entry: player1turn, \n        on: {\n            ENDSPEECH: \"transmissionstate\"\n        },\n    },\n\n\n\n            \n      //  on: {\n                        //go to randomquestion either way, but assign playerturn differently based on who is active\n                        //cannot assign context as an index apparently\n\n                        //take every third random country to make sure there are no repeats\n        transmissionstate: {\n\n            always: [\n                           \n                        //three players active\n                            { target: randomCountries[3], cond: (context) => context.player3 > -1 && context.questionCounter === 3,\n                                actions: [assign({playerTurn: (context) => context.playerTurn = 2}), assign({questionCounter: (context) => context.questionCounter = 4})]},\n\n                          //2 players active, not three\n                        { target: randomCountries[0], cond: (context) => context.player2 > -1 && context.questionCounter === 0 ,\n                          actions: [assign({playerTurn: (context) => context.playerTurn = 2}), assign({questionCounter: (context) => context.questionCounter = 1})]},\n\n                         { target: randomCountries[2], cond: (context) => context.player2 > -1 && context.player3 === -1 && context.questionCounter === 2,\n                         actions: [assign({playerTurn: (context) => context.playerTurn = 2}), assign({questionCounter: (context) => context.questionCounter = 3})]},\n\n                         { target: randomCountries[4], cond: (context) => context.player2 > -1 && context.player3 === -1 && context.questionCounter === 4,\n                            actions: [assign({playerTurn: (context) => context.playerTurn = 2}), assign({questionCounter: (context) => context.questionCounter = 5})]},\n\n                         { target: randomCountries[6], cond: (context) => context.player2 > -1 && context.questionCounter === 6,\n                         actions: [assign({playerTurn: (context) => context.playerTurn = 2}), assign({questionCounter: (context) => context.questionCounter = 7})]},\n\n\n                         //if only player1\n                        //only go to 1 if player2 is inactive\n                          //if player2 is not active, only player 1 is active so just go to player1 again\n                          { target: randomCountries[0], cond: (context) =>  context.questionCounter === 0,\n                       actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 1})]},\n                            \n                        { target: randomCountries[1], cond: (context) => context.player2 === -1 && context.questionCounter === 1,\n                            actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 2})]},\n\n                            \n                         { target: randomCountries[2], cond: (context) => context.player2 === -1 && context.questionCounter === 2,\n                            actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 3})]},\n   \n                        \n                         { target: randomCountries[3], cond: (context) => context.player2 > -1 && context.questionCounter === 3,\n                            actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 4})]},\n\n\n                          { target: randomCountries[4], cond: (context) => context.player2 === -1 && context.questionCounter === 4,\n                           actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 5})]},\n\n                           { target: randomCountries[5], cond: (context) => context.player2 ===1 -1 && context.questionCounter === 5,\n                           actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 6})]},\n\n                           { target: randomCountries[6], cond: (context) => context.player2 === -1 && context.questionCounter === 6,\n                            actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 7})]},\n\n                            { target: randomCountries[7], cond: (context) => context.player2 === -1 && context.questionCounter === 7,\n                            actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 8})]},\n\n\n                            //change context.questioncounter assigns so that it will go to whoWon when finished\n                            { target: randomCountries[8], cond: (context) => (context.player2 === -1 || context.player3 > -1) && context.questionCounter === 8,\n                                actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 8})]},\n\n\n                            //go to 8 if player3 is active or player2 is inactive\n                            { target: randomCountries[8], cond: (context) => context.player3 > -1 && context.questionCounter === 8,\n                                actions: [assign({playerTurn: (context) => context.playerTurn = 2}), assign({questionCounter: (context) => context.questionCounter = 8})]},\n\n\n\n            ]\n     //   }\n    },\n    \t//\n    FinlandQ: {\n        ...player1questions(\"Finland\", \"in this country, 23% of the population said coronavirus restrictions were quote, very easy to cope with, and even an improvement to daily life, unquote\", \"this country consumes the most coffee in the world per capita\", \"icehockey is the most popular sport in this country\"),     \n             },\n    SwedenQ: {\n         ...player1questions(\"Sweden\", \"this country is owed is 234 million euros from north korea\", \"had a king that crowned himself quote, the pirate king of the baltic sea, unquote\", \"drinks the second most coffee in the world\"),\n        },\n    DenmarkQ: {\n        ...player1questions(\"Denmark\", \"this country has the the oldest monarchy in this area,\", \"this country has the oldest flag in the world still in use by an independent nation\", \"has 215 pigs per 100 inhabitants\"),\n    },\n    LithuaniaQ: {\n        ...player1questions(\"Lithuania\", \"the national language in this country is one of the most conservative languages in the world\", \"this country is one of the few countries were basketball is the most popular sport\", \"this country is home to the oldest tree in europe, an oak\"),\n    },\n    GermanyQ: {\n        ...player1questions(\"Germany\", \"this country is the home of the first printed book\", \"this country is the home of the the largest zoo in the world\", \"this countrys national symbol is a black eagle\" )\n    },\n    RussiaQ: {\n        ...player1questions(\"Russia\", \"In this country 25 percent of males die before the age of 55\", \"this countrys national flower is the chamomille\", \"in this country, tea is more popular than coffee\" )\n    },\n    EstoniaQ: {\n        ...player1questions(\"Estonia\", \"couples from this country won the Wife Carrying World Championships for 11 consecutive years between 1998 and 2008\", \"in this countrys capital, public transportation is free\", \"this country has the lowest population of the countries around the baltic sea\" )\n    },\n    PolandQ: {\n        ...player1questions(\"Poland\", \"in this country, people call friends quote, kollega\", \"marie curie is from this country\", \"his country is the home of the worlds oldest restaurang, opened in 1275\")\n    },\n    LatviaQ: {\n        ...player1questions(\"Latvia\", \"this country is home to the widest waterfall in europe\", \"this country has the worlds second oldest flag\", \"the average person consumes in this country consumes 78 kilos of potatoes in a year\")\n    },\n    },\n    },\n    secondplayerQ: {\n        initial: \"first\",\n        states: {\n        first: {\n                always: \n                [\n                    { \n                    target: \"greeting\", cond: (context) => context.playernamesaid === 0,\n                    actions: assign({playernamesaid: (context) => context.playernamesaid = 1})\n                    }, \n                    { \n                        target: \"transmissionstate\", cond: (context) => context.playernamesaid === 1,\n                    },     \n                ],\n            },\n    \n            greeting: {\n                entry: player2turn, \n            on: {\n                ENDSPEECH: \"transmissionstate\"\n            },\n        },\n    \n    \n    \n                \n          //  on: {\n                            //go to randomquestion either way, but assign playerturn differently based on who is active\n                            //cannot assign context as an index apparently\n    \n                            //take every third random country to make sure there are no repeats\n            transmissionstate: {\n    \n                always: [\n\n\n\n                //if player3 is not active, automatically go to player1\n              { target: randomCountries[1], cond: (context) => context.player3 === -1  && context.questionCounter === 1,\n               actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 2})]},\n\n               //if player three is active, the next turn is player 3\n               { target: randomCountries[1], cond: (context) => context.player3 > -1 && context.questionCounter === 1,\n                actions: [assign({playerTurn: (context) => context.playerTurn = 3}), assign({questionCounter: (context) => context.questionCounter = 2})]},\n\n\n                //only go to 3 if player3 is not active\n               { target: randomCountries[3], cond: (context) => context.player3 === -1 && context.questionCounter === 3,\n                  actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 4})]},\n\n                //go to 4 if player 3 is active\n                { target: randomCountries[4], cond: (context) => context.player3 > -1 && context.questionCounter === 4,\n                 actions: [assign({playerTurn: (context) => context.playerTurn = 3}), assign({questionCounter: (context) => context.questionCounter = 5})]},\n\n                //go to five if player3 is not active \n                 { target: randomCountries[5], cond: (context) => context.player3 === -1 && context.questionCounter === 5,\n                 actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 6})]},\n\n                 //always go to 7, if player 3 is inactive turn is player1\n                 { target: randomCountries[7], cond: (context) => context.player3 === -1 && context.questionCounter === 7,\n                    actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 8})]},\n\n                    //always go to 7, turn is player 3 if player 3 is active\n                  { target: randomCountries[7], cond: (context) => context.player3 > -1 && context.questionCounter === 7,\n                  actions: [assign({playerTurn: (context) => context.playerTurn = 3}), assign({questionCounter: (context) => context.questionCounter = 8})]},\n                  \n                  // will never get 8\n  ]\n    },\n    FinlandQ: {\n        ...player2questions(\"Finland\", \"in this country, 23% of the population said coronavirus restrictions were quote, very easy to cope with, and even an improvement to daily life, unquote\", \"this country consumes the most coffee in the world per capita\", \"icehockey is the most popular sport in this country\"),     \n             },\n    SwedenQ: {\n         ...player2questions(\"Sweden\", \"this country is owed is 234 million euros from north korea\", \"had a king that crowned himself quote, the pirate king of the baltic sea, unquote\", \"drinks the second most coffee in the world\"),\n        },\n    DenmarkQ: {\n        ...player2questions(\"Denmark\", \"this country has the the oldest monarchy in this area,\", \"this country has the oldest flag in the world still in use by an independent nation\", \"has 215 pigs per 100 inhabitants\"),\n    },\n    LithuaniaQ: {\n        ...player2questions(\"Lithuania\", \"the national language in this country is one of the most conservative languages in the world\", \"this country is one of the few countries were basketball is the most popular sport\", \"this country is home to the oldest tree in europe, an oak\"),\n    },\n    GermanyQ: {\n        ...player2questions(\"Germany\", \"this country is the home of the first printed book\", \"this country is the home of the the largest zoo in the world\", \"this countrys national symbol is a black eagle\" )\n    },\n    RussiaQ: {\n        ...player2questions(\"Russia\", \"In this country 25 percent of males die before the age of 55\", \"this countrys national flower is the chamomille\", \"in this country, tea is more popular than coffee\" )\n    },\n    EstoniaQ: {\n        ...player2questions(\"Estonia\", \"couples from this country won the Wife Carrying World Championships for 11 consecutive years between 1998 and 2008\", \"in this countrys capital, public transportation is free\", \"this country has the lowest population of the countries around the baltic sea\" )\n    },\n    PolandQ: {\n        ...player2questions(\"Poland\", \"in this country, people call friends quote, kollega\", \"marie curie is from this country\", \"his country is the home of the worlds oldest restaurang, opened in 1275\")\n    },\n    LatviaQ: {\n        ...player2questions(\"Latvia\", \"this country is home to the widest waterfall in europe\", \"this country has the worlds second oldest flag\", \"the average person consumes in this country consumes 78 kilos of potatoes in a year\")\n    },\n    },\n    },\n    thirdplayerQ: {\n        initial: \"first\",\n        states: {\n        first: {\n            entry: player3turn, \n        on: {\n            ENDSPEECH: [ \n                //3 players\n                //p1 0 3 6\n                //p2 1 4 7\n                //p3 2 5 8\n\n               //if player three is active, it will only go to three states\n               { target: randomCountries[2], cond: (context) => context.questionCounter === 2,\n                actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 3})]},\n                 { target: randomCountries[5], cond: (context) =>  context.questionCounter === 5,\n                 actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 6})]},\n                  { target: randomCountries[8], cond: (context) => context.questionCounter === 7,\n                  actions: [assign({playerTurn: (context) => context.playerTurn = 1}), assign({questionCounter: (context) => context.questionCounter = 8})]},\n\n  ]\n        }\n    },\n    FinlandQ: {\n        ...player3questions(\"Finland\", \"in this country, 23% of the population said coronavirus restrictions were quote, very easy to cope with, and even an improvement to daily life, unquote\", \"this country consumes the most coffee in the world per capita\", \"icehockey is the most popular sport in this country\"),     \n             },\n    SwedenQ: {\n         ...player3questions(\"Sweden\", \"this country is owed is 234 million euros from north korea\", \"had a king that crowned himself quote, the pirate king of the baltic sea, unquote\", \"drinks the second most coffee in the world\"),\n        },\n    DenmarkQ: {\n        ...player3questions(\"Denmark\", \"this country has the the oldest monarchy in this area,\", \"this country has the oldest flag in the world still in use by an independent nation\", \"has 215 pigs per 100 inhabitants\"),\n    },\n    LithuaniaQ: {\n        ...player3questions(\"Lithuania\", \"the national language in this country is one of the most conservative languages in the world\", \"this country is one of the few countries were basketball is the most popular sport\", \"this country is home to the oldest tree in europe, an oak\"),\n    },\n    GermanyQ: {\n        ...player3questions(\"Germany\", \"this country is the home of the first printed book\", \"this country is the home of the the largest zoo in the world\", \"this countrys national symbol is a black eagle\" )\n    },\n    RussiaQ: {\n        ...player3questions(\"Russia\", \"In this country 25 percent of males die before the age of 55\", \"this countrys national flower is the chamomille\", \"in this country, tea is more popular than coffee\" )\n    },\n    EstoniaQ: {\n        ...player3questions(\"Estonia\", \"couples from this country won the Wife Carrying World Championships for 11 consecutive years between 1998 and 2008\", \"in this countrys capital, public transportation is free\", \"this country has the lowest population of the countries around the baltic sea\" )\n    },\n    PolandQ: {\n        ...player3questions(\"Poland\", \"in this country, people call friends quote, kollega\", \"marie curie is from this country\", \"his country is the home of the worlds oldest restaurang, opened in 1275\")\n    },\n    LatviaQ: {\n        ...player3questions(\"Latvia\", \"this country is home to the widest waterfall in europe\", \"this country has the worlds second oldest flag\", \"the average person consumes in this country consumes 78 kilos of potatoes in a year\")\n    },\n    },\n    },\n\n\n}, \n        },\n        //it is kind of weird that it goes to \"niclas it is your turn\" after asking for score, but it does not take long anyways, maybe it goes to third question each time? it shouldnt if the qnumber does not change\nhelp: {\n    entry: say(\"welcome to the question and answer game, the questions will be about the countries surrounding the baltic sea, you will be told facts about each country and try to figure out what country it is, there are three questions for each country with varying degrees of difficulty and a higher score associated with the more difficult questions, at the end of the game a winner will be crowned, lets proceed\"),\n    on: { 'ENDSPEECH': '#root.dm.topstate.hist' }\n        },\n\n\n///questioncounter need to decrease because it is increased when asked, qnumber needs to be increased because it is increased when asked\n score1player: {\n     entry: sayScoreOnePlayer,\n     on: {\n         ENDSPEECH: {\n        target: '#root.dm.topstate.hist',\n        actions: [assign({questionCounter: (context) => context.questionCounter -1}), assign({Qnumber: (context) => context.Qnumber + 1})]\n        },\n    }, \n },\nscore2player: {\n        entry: sayScoreTwoPlayers,     \n        on: {\n            ENDSPEECH: [ \n            {target: '#root.dm.topstate.hist',\n           actions: [assign({questionCounter: (context) => context.questionCounter -1}), assign({playerTurn: (context) => context.playerTurn -1}), assign({Qnumber: (context) => context.Qnumber + 1})],\n           cond: (context) => context.playerTurn > 1},\n           {\n            target: '#root.dm.topstate.hist',\n            actions: [assign({questionCounter: (context) => context.questionCounter -1}), assign({Qnumber: (context) => context.Qnumber + 1})],\n            cond: (context) => context.playerTurn === 1\n            }\n        ]\n       }, \n    },\nscore3player: {\n        entry: sayScoreThreePlayers,     \n       on: { \n           ENDSPEECH: [ \n            { target: '#root.dm.topstate.hist',\n           actions: [assign({questionCounter: (context) => context.questionCounter -1}), assign({playerTurn: (context) => context.playerTurn -1}), assign({Qnumber: (context) => context.Qnumber + 1})],\n           cond: (context) => context.playerTurn > 1},\n           { target: '#root.dm.topstate.hist',\n            actions: [assign({questionCounter: (context) => context.questionCounter -1}), assign({Qnumber: (context) => context.Qnumber + 1})],\n            cond: (context) => context.playerTurn === 1}\n        ]\n    }\n},\n    winner: {\n        //create a bigger state with conditions, depending on how many players, firstplace, secondplace, lastplace, make transition to this state from chooseplayer\n        //all of this because i dont know how to put a context in a function\n        initial: \"firststate\",\n\n        states: {\n            firststate: {\n                always: [ \n                    { target: \"oneplayer\", cond: (context) => context.player2 === -1 }, \n                    { target: \"twoplayers\", cond: (context) =>  context.player2 > -1 },\n                    { target: \"threeplayers\", cond: (context) =>  context.player3 > -1 }\n                ],\n            },\n            oneplayer: {\n                entry: sayScoreOnePlayer\n            },\n            twoplayers: {\n                always: [ \n                    { target: \"onetwo\", cond: (context) => context.player1 > context.player2},\n                    { target: \"twoone\", cond: (context) => context.player2 > context.player1}\n                ]\n            },\n            onetwo: {\n                entry: order12\n\n            },\n            twoone: {\n                entry: order21\n            },\n            //not added the states yet\n            threeplayers: {\n                always: [ \n                    { target: \"oneTwoThree\", cond: (context) => context.player1 > context.player2 && context.player2 > context.player3 },\n                    { target: \"oneThreeTwo\", cond: (context) => context.player1 > context.player3 && context.player3 > context.player2 },\n                    { target: \"twoOneThree\", cond: (context) => context.player2 > context.player1 && context.player1 > context.player3 },\n                    { target: \"twoThreeOne\", cond: (context) => context.player2 > context.player3 && context.player3 > context.player1 },\n                    { target: \"threeTwoOne\", cond: (context) => context.player3 > context.player2 && context.player2 > context.player1 },\n                    { target: \"threeOneTwo\", cond: (context) => context.player3 > context.player1 && context.player1 > context.player2 },\n                ]\n\n            },\n            threeTwoOne: {\n                entry: order321\n            },\n            threeOneTwo: {\n                entry: order312\n            },\n            oneThreeTwo: {\n                entry: order132\n            },\n            twoThreeOne: {\n                entry: order231\n            },\n            twoOneThree: {\n                entry: order213\n            },\n            oneTwoThree: {\n                entry: order123\n            },\n\n        }\n        }\n    },\n})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./finalassignment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        MAXSPEECH: \"idle\",\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n                \n            );\n    }\n}\n\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    //maybe use https://lizardpoint.com/geography/europe-quiz.php to have countries light up if that is the answer?\n    return (\n        <div className=\"App\">\n                <img src=\"https://www.worldatlas.com/r/w960-q80/upload/3c/7a/23/baltic-sea-map.png\"/>\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'http://meeting-maker.herokuapp.com/'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}