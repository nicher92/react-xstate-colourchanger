{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","nomatch","giveInformation","information","names","days","times","grammar","person","day","time","yesOrNoGrammar","tru","fal","goBackGrammar","goback","sayInput","context","Input","dmMachine","init","assign","count","CLICK","topstate","RECOGNISED","target","cond","recResult","hist","history","askUser","query","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intent","name","onError","console","log","middlestate","always","todo","timer","appointment","who","MAXSPEECH","one","two","listener","question","first","partDay","wholeDayFinal","partDayFinal","nomatch1","nomatch2","nomatch3","nomatch4","help","endstate","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.3c12d61e.chunk.js","sourcesContent":["import { MachineConfig, actions, Action, assign } from \"xstate\";\nimport { mapContext } from \"xstate/lib/utils\";\n//import { cancel } from \"xstate/lib/actionTypes\";\n\nconst {send, cancel} = actions;\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: say(prompt),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: [send(\"LISTEN\"), send(\"MAXSPEECH\", {delay: 10000, id: \"maxsp\"})]\n                },\n                nomatch: {\n                    entry: say(\"Sorry I cant find what you are looking for\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                },\n            }})\n    }\n\n\nfunction giveInformation (information: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n            initial: information,\n            states: {\n                names: {\n                    entry: say(\"These are the people available, Tommy, Marina, Saga and John\"),\n                },\n                \n                days: { \n                    entry: say(\"These are the days available, Friday, Thursday and Wednesday\"),\n                },\n                times: { \n                    entry: say(\"These are the times available, seven o clock, eight o clock, nine o clock and ten o clock\"),\n                },\n            }})\n    }\n \n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"Tommy\": { person: \"Tommy Hertzberg\" },\n    \"Marina\": { person: \"Marina Noren\" },\n    \"Saga\": { person: \"Saga Nilsson\" },\n    \"John\": { person: \"John Appleseed\" },\n    \"Jon\": { person: \"John Appleseed\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"at nine\": { time: \"9\" },\n    \"nine\": { time: \"9\" },\n    \"nine o clock\": { time: \"9\" },\n    \"seven\": { time: \"7\" },\n    \"seven o clock\": { time: \"7\" },\n    \"at eight\": { time: \"8\" },\n    \"eight\": { time: \"8\" },\n    \"eight o clock\": { time: \"8\" },\n    \"at ten\": { time: \"10\" },\n    \"tenn\": {time: \"10\" },\n    \"ten o clock\": { time: \"10\" },\n    \"ten\": {time: \"10\" },\n}\n\n\nconst yesOrNoGrammar: { [index: string]: { tru?: string, fal?: string } } = {\n    \"ya\": { tru: \"yes\" },\n    \"ja\": { tru: \"yes\" },\n    \"yes\": { tru: \"yes\" },\n    \"yeah\": { tru: \"yes\" },\n    \"ya\": { tru: \"yes\" },\n    \"ok\": { tru: \"yes\" },\n    \"okay\": { tru: \"yes\" },\n    \"sure\": { tru: \"yes\" },\n    \"no\": { fal: \"no\" },\n    \"nope\": { fal: \"no\" },\n    \"nah\": { fal: \"no\" },\n    \"no way\": { fal: \"no\" },\n    \"nej\": { fal: \"no\" },\n}\n\n\nconst goBackGrammar: { [index: string]: { goback?: string } } = {\n    \"Go back\": { goback: \"go back\" },\n    \"previous\": { goback: \"go back\" },\n    \"previous stage\": { goback: \"go back\" },\n    \"back\": { goback: \"go back\" },\n    \"back up\": { goback: \"go back\" },\n    \"return\": { goback: \"go back\" },\n    \n}\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://meeting-maker.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n        \n\nconst sayInput: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.Input}`\n}))\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            entry: assign({count: (context) => context.count = 0}), \n            on: { \n                CLICK: \"topstate\",\n            },\n        },\n        topstate: {\n            initial: 'askUser',\n            on: {\n                RECOGNISED:\n                {\n                    target: '#root.dm.help',\n                    actions: cancel(\"maxsp\"), \n                    cond: (context) => context.recResult === 'help'\n                },\n            },\n            \n      \n            states: {\n                hist: { type: 'history', history: 'shallow' },\n            askUser: {\n                  on: {\n                RECOGNISED: [\n                { target: \"query\", actions: [ cancel(\"maxsp\"), assign((context) => { return { query: context.recResult } }) ], cond: (context) => !(context.recResult === \"help\"),},\n                { target: \"#root.dm.nomatch1\", cond: (context) => !(context.recResult === \"help\"), actions: cancel(\"maxsp\")},\n                ]\n            },\n            ...promptAndAsk(\"what would you like to do?\")\n            },\n            query: {\n                invoke: {\n                    id: \"NLU\",\n                    src: (context, event) => nluRequest(context.query),\n                    onDone: {\n                        target: \"middlestate\",\n                        actions: [assign((context, event) => { return {Input: event.data.intent.name }}),\n                                (context:SDSContext, event:any) => sayInput || {}],\n                    },\n                    onError: {\n                        target: \"#root.dm.init\",\n                        actions: (context, event) => console.log(event.data),\n                    }\n                  },\n                },\n\n        \n        \n        middlestate: {\n            always: [\n                { target: \"timer\", cond: (context, event) => context.Input === \"timer\" },\n                { target: \"appointment\", cond: (context, event) => context.Input === \"appointment\" },\n                { target:  \"todo\", cond: (context, event) => context.Input === \"to do\"},\n                { target: \"nomatch\" }]\n        },\n        \n        nomatch: {\n            on: { ENDSPEECH: \"askUser\" },\n            entry: say(\"sorry, that option is not available, please try again\")\n            },\n        \n        todo: {\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            entry: say(\"welcome to the to do state\")\n        },\n        \n        timer: {\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            entry: say(\"welcome to the timer state\")\n        },\n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        \n        \n        who: {\n            initial: \"one\",\n            on: {\n                RECOGNISED: [\n                    {cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [ cancel(\"maxsp\"), assign((context) => { return { person: grammar[context.recResult].person } }) ],\n                    target: \"day\"},\n                    { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                    actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                    target:  \"askUser\" },\n                    { target: \"#root.dm.nomatch2\", cond: (context) => !(context.recResult === \"help\"), actions: cancel(\"maxsp\"),}\n\n                ],\n                MAXSPEECH: {\n                    actions: [\n                    (context) => console.log(`${context.count}`),\n                    assign({count: (context) => context.count + 1}),\n                    ], \n                    target: 'init', cond: (context) => (context.count) < 3,\n                    target: \"#root.dm.nomatch2\",\n            },\n            \n            },\n            states: {\n                one: {\n                    ...giveInformation(\"names\"),\n                on: { ENDSPEECH: \"two\" }\n            },\n                two: { ...promptAndAsk(\"Who are you meeting with\")\n\n                },\n                nomatch: {\n                    entry: say(\"Sorry, that person is not available\"),\n                    on: { ENDSPEECH: \"one\" }\n                },\n            }, \n        },\n        \n        day: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"listener\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, you want to meet ${context.person}`\n                        }))\n                        },\n                    },\n                }, \n                \n        listener: {\n                initial: \"one\",\n                on : { \n                    RECOGNISED: [\n                        { cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: [cancel(\"maxsp\"), assign((context) => { return { day: grammar[context.recResult].day } })], \n                        target: \"question\" },\n                        { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                        actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                        target:  \"who\" },\n                        { target: \"#root.dm.nomatch3\", cond: (context) => !(context.recResult === \"help\"), actions: cancel(\"maxsp\"),}],\n\n                    MAXSPEECH: {\n                            actions: [\n                            (context) => console.log(`${context.count}`),\n                            assign({count: (context) => context.count + 1}),\n                            ], \n                            target: 'init', cond: (context) => (context.count) < 3,\n                            target: \"#root.dm.nomatch3\",\n                    },\n                    }, \n                states: {\n                one: {\n                    ...giveInformation(\"days\"),\n                on: { ENDSPEECH: \"two\" }\n                    },\n                two: { ...promptAndAsk(\"On which day is your meeting\"),\n                        },\n                    }, \n                },\n                        \n\n            \n        question: {\n            initial: \"first\", \n            on: { RECOGNISED: [\n                            { cond: (context) => \"tru\" in (yesOrNoGrammar[context.recResult] || {}),\n                            actions: [cancel(\"maxsp\"), assign((context) => { return { tru: yesOrNoGrammar[context.recResult].tru } })],\n                            target: \"wholeDayFinal\" },\n                            { cond: (context) => \"fal\" in (yesOrNoGrammar[context.recResult] || {}),\n                            actions: [cancel(\"maxsp\"), assign((context) => { return { fal: yesOrNoGrammar[context.recResult].fal } })],\n                            target:  \"partDay\" },\n                            { target: \"#root.dm.nomatch1\", cond: (context) => !(context.recResult === \"help\"), actions: cancel(\"maxsp\"),}],\n                        \n                        MAXSPEECH: {\n                            actions: [\n                             (context) => console.log(`${context.count}`),\n                            assign({count: (context) => context.count + 1}),\n                            ], \n                            target: 'init', cond: (context) => (context.count) < 3,\n                            target: \"#root.dm.nomatch1\",\n                        },     \n                        \n                        },\n            states: {\n                        first: {\n                            entry: say(\"will the appointment take the entire day\"),\n                        on: {ENDSPEECH: \"ask\" },\n                        },\n                        \n                        ask: {\n                            entry: [send(\"LISTEN\"), send(\"MAXSPEECH\", {delay: 5000, id: \"maxsp\"})]\n                        },\n                }, \n            },\n    \n    \n    \n                \n          partDay: {\n                initial: \"one\", \n                on : { \n                    RECOGNISED: [            \n                        {cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: [cancel(\"maxsp\"), assign((context) => { return { time: grammar[context.recResult].time } })], \n                        target: \"partDayFinal\" },\n                        { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                        actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                        target:  \"question\" },\n                        { target: \"#root.dm.nomatch4\", cond: (context) => !(context.recResult === \"help\"), actions: cancel(\"maxsp\"),} ],\n                MAXSPEECH: {\n                      actions: [\n                      (context) => console.log(`${context.count}`),\n                    assign({count: (context) => context.count + 1}),\n                       ], \n                     target: 'init', cond: (context) => (context.count) < 3,\n                       target: \"#root.dm.nomatch4\",\n                        },        \n                    \n                    },\n                states: {\n                        one: {\n                            ...giveInformation(\"times\"),\n                            on: { ENDSPEECH: \"two\" }\n                        },\n                        two: { ...promptAndAsk(\"At what time is your meeting?\"),\n                            },\n                }, \n            },\n\n                \n        wholeDayFinal: {\n                initial: \"first\", \n                    on: { \n                        RECOGNISED: \n                                [{\n                                cond: (context) => \"tru\" in (yesOrNoGrammar[context.recResult] || {}),\n                                actions: [cancel(\"maxsp\"), assign((context) => { return { tru: yesOrNoGrammar[context.recResult].tru } })],\n                                target: \"#root.dm.endstate\"\n                                },\n                                \n                                { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                                  actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                                  target:  \"question\" },\n                        \n                                {\n                                cond: (context) => \"fal\" in (yesOrNoGrammar[context.recResult] || {}),\n                                actions: [cancel(\"maxsp\"), assign((context) => { return { fal: yesOrNoGrammar[context.recResult].fal } })],\n                                target:  \"#root.dm.init\"  \n                                },\n                                { target: \"#root.dm.nomatch1\", cond: (context) => !(context.recResult === \"help\"), actions: cancel(\"maxsp\"),}\n                            ],\n\n                            MAXSPEECH: {\n                                actions: [\n                                (context) => console.log(`${context.count}`),\n                              assign({count: (context) => context.count + 1}),\n                                 ], \n                               target: 'init', cond: (context) => (context.count) < 3,\n                                 target: \"#root.dm.nomatch1\",\n                                  },  \n                        },\n                    \n                    states: {\n                        first: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK, you want to meet ${context.person} on ${context.day} the entire day`\n                        })),\n                        on: {ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send(\"LISTEN\"), send(\"MAXSPEECH\", {delay: 5000, id: \"maxsp\"})]\n                        },\n                nomatch: {\n                    entry: say(\"Please repeat yourself\"),\n                    on: { ENDSPEECH: \"first\" }\n                },\n                    }, \n                },\n\n        partDayFinal:  {\n                initial: \"first\", \n                    on: { \n                        RECOGNISED: \n                                [{\n                                    cond: (context) => \"tru\" in (yesOrNoGrammar[context.recResult] || {}),\n                                    actions: [cancel(\"maxsp\"), assign((context) => { return { tru: yesOrNoGrammar[context.recResult].tru } })],\n                                    target: \"#root.dm.endstate\"\n                                    },\n                                \n                                { cond: (context) => \"goback\" in (goBackGrammar[context.recResult] || {}),\n                                  actions: assign((context) => { return { goback: goBackGrammar[context.recResult].goback } }),\n                                  target:  \"question\" },\n                        \n                                {\n                                cond: (context) => \"fal\" in (yesOrNoGrammar[context.recResult] || {}),\n                                actions: [cancel(\"maxsp\"), assign((context) => { return { fal: yesOrNoGrammar[context.recResult].fal } })],\n                                target:  \"#root.dm.init\"},\n                                { target: \"#root.dm.nomatch1\", cond: (context) => !(context.recResult === \"help\"), actions: cancel(\"maxsp\")}],\n                        \n                                MAXSPEECH: {\n                                    actions: [\n                                    (context) => console.log(`${context.count}`),\n                                  assign({count: (context) => context.count + 1}),\n                                     ], \n                                   target: 'init', cond: (context) => (context.count) < 3,\n                                     target: \"#root.dm.nomatch1\",\n                                      },  \n                            },\n                    \n                    states: {\n                        first: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK, you want to meet ${context.person} on ${context.day} at ${context.time}`\n                        })),\n                        on: {ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send(\"LISTEN\"), send(\"MAXSPEECH\", {delay: 5000, id: \"maxsp\"})]\n                        },\n\n                    }, \n                },\n            },\n        },\n\n        \n        nomatch1: {\n            entry: say(\"Please repeat yourself\"),\n            on: { ENDSPEECH: '#root.dm.topstate.hist' }\n        },\n        nomatch2: {\n            entry: say(\"Sorry, that person is not available\"),\n            on: { ENDSPEECH:'#root.dm.topstate.hist' }\n        },\n        nomatch3: {\n            entry: say(\"Sorry, that day is not available\"),\n            on: { ENDSPEECH:'#root.dm.topstate.hist' }\n        },\n        nomatch4: {\n            entry: say(\"Sorry, that time is not available\"),\n            on: { ENDSPEECH:'#root.dm.topstate.hist' }\n        },\n        help: {\n            entry: say(\"sorry buddy, i will just send you back\"),\n            on: { 'ENDSPEECH': '#root.dm.topstate.hist' }\n        },\n        endstate: { \n            entry: say(\"your appointment has been created\"),\n            type: \"final\"\n            },\n        },\n     //end topstate\n   //end of all states\n})\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentPlus\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        MAXSPEECH: \"idle\",\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n                \n            );\n    }\n}\n\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'http://meeting-maker.herokuapp.com/'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}